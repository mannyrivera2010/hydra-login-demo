# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommitsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_commit(self, commit_id, **kwargs):  # noqa: E501
        """Retrieves the Commit specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit ID. NOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str format: String representation of the desired RDFFormat
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_commit_with_http_info(commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_commit_with_http_info(commit_id, **kwargs)  # noqa: E501
            return data

    def get_commit_with_http_info(self, commit_id, **kwargs):  # noqa: E501
        """Retrieves the Commit specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_with_http_info(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit ID. NOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str format: String representation of the desired RDFFormat
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['commit_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_commit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'commit_id' in params:
            path_params['commitId'] = params['commit_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commits/{commitId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_commit_history(self, commit_id, target_id, **kwargs):  # noqa: E501
        """Retrieves the Commit history specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_history(commit_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit IDNOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str target_id: String value of the target Commit IDNOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str entity_id: Optional String value of the Entity IDNOTE: Assumes an IRI unless String starts with \"_:\"
        :param int offset: Optional offset for the results
        :param int limit: Optional limit for the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_commit_history_with_http_info(commit_id, target_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_commit_history_with_http_info(commit_id, target_id, **kwargs)  # noqa: E501
            return data

    def get_commit_history_with_http_info(self, commit_id, target_id, **kwargs):  # noqa: E501
        """Retrieves the Commit history specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_commit_history_with_http_info(commit_id, target_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit IDNOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str target_id: String value of the target Commit IDNOTE: Assumes an IRI unless String starts with \"_:\" (required)
        :param str entity_id: Optional String value of the Entity IDNOTE: Assumes an IRI unless String starts with \"_:\"
        :param int offset: Optional offset for the results
        :param int limit: Optional limit for the results
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['commit_id', 'target_id', 'entity_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_commit_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_commit_history`")  # noqa: E501
        # verify the required parameter 'target_id' is set
        if ('target_id' not in params or
                params['target_id'] is None):
            raise ValueError("Missing the required parameter `target_id` when calling `get_commit_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'commit_id' in params:
            path_params['commitId'] = params['commit_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commits/{commitId}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compiled_resource1(self, commit_id, **kwargs):  # noqa: E501
        """Retrieves the Commit specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compiled_resource1(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit ID (required)
        :param str entity_id: Optional Resource identifying the Entity to filter the chain of Commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_compiled_resource1_with_http_info(commit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compiled_resource1_with_http_info(commit_id, **kwargs)  # noqa: E501
            return data

    def get_compiled_resource1_with_http_info(self, commit_id, **kwargs):  # noqa: E501
        """Retrieves the Commit specified by the provided ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_compiled_resource1_with_http_info(commit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str commit_id: String value of the Commit ID (required)
        :param str entity_id: Optional Resource identifying the Entity to filter the chain of Commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['commit_id', 'entity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compiled_resource1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'commit_id' is set
        if ('commit_id' not in params or
                params['commit_id'] is None):
            raise ValueError("Missing the required parameter `commit_id` when calling `get_compiled_resource1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'commit_id' in params:
            path_params['commitId'] = params['commit_id']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commits/{commitId}/resource', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_difference1(self, source_id, **kwargs):  # noqa: E501
        """Gets the Difference for the specified commit or between the two specified Commits. If a limit and offset are passed in, retrieve the differences for the paged subjects using the limit and offset. If the offset is greater than the number of subjects, the additions and deletions arrays of the response object will be empty arrays. If limit and offset are provided, a header called has-more-results will be added to the response object that indicates whether more pages of results exist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_difference1(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: String value of the source Commit (required)
        :param str target_id: Optional String value of the target Commit ID
        :param int limit: Optional limit of the number of subjects to retrieve the differences for. The number of subjects in the response object may be less than the limit due to the way some blank nodes are skolemized
        :param int offset: Optional integer offset of the subject to start collecting differences from
        :param str format: String representation of the desired RDFFormat
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_difference1_with_http_info(source_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_difference1_with_http_info(source_id, **kwargs)  # noqa: E501
            return data

    def get_difference1_with_http_info(self, source_id, **kwargs):  # noqa: E501
        """Gets the Difference for the specified commit or between the two specified Commits. If a limit and offset are passed in, retrieve the differences for the paged subjects using the limit and offset. If the offset is greater than the number of subjects, the additions and deletions arrays of the response object will be empty arrays. If limit and offset are provided, a header called has-more-results will be added to the response object that indicates whether more pages of results exist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_difference1_with_http_info(source_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: String value of the source Commit (required)
        :param str target_id: Optional String value of the target Commit ID
        :param int limit: Optional limit of the number of subjects to retrieve the differences for. The number of subjects in the response object may be less than the limit due to the way some blank nodes are skolemized
        :param int offset: Optional integer offset of the subject to start collecting differences from
        :param str format: String representation of the desired RDFFormat
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'target_id', 'limit', 'offset', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_difference1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_difference1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501

        query_params = []
        if 'target_id' in params:
            query_params.append(('targetId', params['target_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commits/{sourceId}/difference', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_difference_for_subject(self, source_id, subject_id, format, **kwargs):  # noqa: E501
        """Retrieves the Difference in the specified commit for the specified subject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_difference_for_subject(source_id, subject_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: String value of the source Commit (required)
        :param str subject_id: String value of the subjectId (required)
        :param str format: String representation of the desired RDFFormat (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_difference_for_subject_with_http_info(source_id, subject_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.get_difference_for_subject_with_http_info(source_id, subject_id, format, **kwargs)  # noqa: E501
            return data

    def get_difference_for_subject_with_http_info(self, source_id, subject_id, format, **kwargs):  # noqa: E501
        """Retrieves the Difference in the specified commit for the specified subject  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_difference_for_subject_with_http_info(source_id, subject_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str source_id: String value of the source Commit (required)
        :param str subject_id: String value of the subjectId (required)
        :param str format: String representation of the desired RDFFormat (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['source_id', 'subject_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_difference_for_subject" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params or
                params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_difference_for_subject`")  # noqa: E501
        # verify the required parameter 'subject_id' is set
        if ('subject_id' not in params or
                params['subject_id'] is None):
            raise ValueError("Missing the required parameter `subject_id` when calling `get_difference_for_subject`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `get_difference_for_subject`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'source_id' in params:
            path_params['sourceId'] = params['source_id']  # noqa: E501
        if 'subject_id' in params:
            path_params['subjectId'] = params['subject_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/commits/{sourceId}/difference/{subjectId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
