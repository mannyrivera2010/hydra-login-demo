# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SparqlApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_limited_results(self, query, **kwargs):  # noqa: E501
        """Retrieves the limited results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_limited_results(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The SPARQL query to execute (required)
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_limited_results_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.get_limited_results_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def get_limited_results_with_http_info(self, query, **kwargs):  # noqa: E501
        """Retrieves the limited results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_limited_results_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: The SPARQL query to execute (required)
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'dataset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_limited_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `get_limited_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql/limited-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rdf_query(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rdf_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_rdf_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_rdf_query_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dataset', 'file_type', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rdf_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            form_params.append(('dataset', params['dataset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/tab-separated-values', 'application/octet-stream', 'text/*', 'application/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rdf_query(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param str dataset2:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rdf_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_rdf_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_rdf_query_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param str dataset2:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'dataset2', 'dataset', 'file_type', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rdf_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            form_params.append(('dataset', params['dataset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/tab-separated-values', 'application/octet-stream', 'text/*', 'application/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rdf_query_limited(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_limited(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rdf_query_limited_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_rdf_query_limited_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_rdf_query_limited_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_limited_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'dataset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rdf_query_limited" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            form_params.append(('dataset', params['dataset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/tab-separated-values', 'application/octet-stream', 'text/*', 'application/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql/limited-results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_rdf_query_limited(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_limited(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param str dataset2:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_rdf_query_limited_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_rdf_query_limited_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_rdf_query_limited_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_rdf_query_limited_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query:
        :param str dataset2:
        :param str dataset: Optional DatasetRecord IRI representing the Dataset to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'dataset2', 'dataset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_rdf_query_limited" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            form_params.append(('dataset', params['dataset']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/tab-separated-values', 'application/octet-stream', 'text/*', 'application/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql/limited-results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rdf_query(self, query, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rdf_query(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: String representing a SPARQL query (required)
        :param str dataset: An optional DatasetRecord IRI representing the Dataset to query
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rdf_query_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.rdf_query_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def rdf_query_with_http_info(self, query, **kwargs):  # noqa: E501
        """Retrieves the results of the provided SPARQL query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rdf_query_with_http_info(query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: String representing a SPARQL query (required)
        :param str dataset: An optional DatasetRecord IRI representing the Dataset to query
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'dataset', 'file_type', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rdf_query" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `rdf_query`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'dataset' in params:
            query_params.append(('dataset', params['dataset']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel', 'text/csv', 'text/tab-separated-values', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/sparql', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
