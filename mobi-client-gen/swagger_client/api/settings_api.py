# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_setting(self, body, sub_type, type, **kwargs):  # noqa: E501
        """Creates a Setting and it's referenced entities from the provided body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_setting(body, sub_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A JSON-LD representation of the Setting that will be created (required)
        :param str sub_type: The specific type of setting being updated (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_setting_with_http_info(body, sub_type, type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_setting_with_http_info(body, sub_type, type, **kwargs)  # noqa: E501
            return data

    def create_setting_with_http_info(self, body, sub_type, type, **kwargs):  # noqa: E501
        """Creates a Setting and it's referenced entities from the provided body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_setting_with_http_info(body, sub_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A JSON-LD representation of the Setting that will be created (required)
        :param str sub_type: The specific type of setting being updated (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sub_type', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_setting`")  # noqa: E501
        # verify the required parameter 'sub_type' is set
        if ('sub_type' not in params or
                params['sub_type'] is None):
            raise ValueError("Missing the required parameter `sub_type` when calling `create_setting`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `create_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sub_type' in params:
            query_params.append(('subType', params['sub_type']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_setting(self, setting_id, type, **kwargs):  # noqa: E501
        """Deletes a Setting who has the subjectId of settingId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting(setting_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: The resource identifying the Setting to delete (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_setting_with_http_info(setting_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_setting_with_http_info(setting_id, type, **kwargs)  # noqa: E501
            return data

    def delete_setting_with_http_info(self, setting_id, type, **kwargs):  # noqa: E501
        """Deletes a Setting who has the subjectId of settingId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting_with_http_info(setting_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: The resource identifying the Setting to delete (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `delete_setting`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/{settingId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_setting_by_type(self, setting_type, type, **kwargs):  # noqa: E501
        """Deletes the Setting whose type is the provided settingType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting_by_type(setting_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_type: (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_setting_by_type_with_http_info(setting_type, type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_setting_by_type_with_http_info(setting_type, type, **kwargs)  # noqa: E501
            return data

    def delete_setting_by_type_with_http_info(self, setting_type, type, **kwargs):  # noqa: E501
        """Deletes the Setting whose type is the provided settingType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_setting_by_type_with_http_info(setting_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_type: (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_type', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_setting_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `delete_setting_by_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_setting_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/types/{settingType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_settings(self, type, **kwargs):  # noqa: E501
        """Retrieves all Settings of the provided type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_settings(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_settings_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_settings_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_all_settings_with_http_info(self, type, **kwargs):  # noqa: E501
        """Retrieves all Settings of the provided type.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_settings_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_all_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups1(self, type, **kwargs):  # noqa: E501
        """Retrieves all SettingGroups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups1(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_groups1_with_http_info(type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_groups1_with_http_info(type, **kwargs)  # noqa: E501
            return data

    def get_groups1_with_http_info(self, type, **kwargs):  # noqa: E501
        """Retrieves all SettingGroups.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups1_with_http_info(type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_groups1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_setting(self, setting_id, type, **kwargs):  # noqa: E501
        """Retrieves a Setting identified by the settingId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting(setting_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: The resource identifying the Setting to retrieve (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_setting_with_http_info(setting_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_setting_with_http_info(setting_id, type, **kwargs)  # noqa: E501
            return data

    def get_setting_with_http_info(self, setting_id, type, **kwargs):  # noqa: E501
        """Retrieves a Setting identified by the settingId.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_with_http_info(setting_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_id: The resource identifying the Setting to retrieve (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `get_setting`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/{settingId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_setting_by_type(self, setting_type, type, **kwargs):  # noqa: E501
        """Retrieves the Setting whose type is the provided settingType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_by_type(setting_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_type: The resource identifying the type of Setting toretrieve (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_setting_by_type_with_http_info(setting_type, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_setting_by_type_with_http_info(setting_type, type, **kwargs)  # noqa: E501
            return data

    def get_setting_by_type_with_http_info(self, setting_type, type, **kwargs):  # noqa: E501
        """Retrieves the Setting whose type is the provided settingType  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_by_type_with_http_info(setting_type, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str setting_type: The resource identifying the type of Setting toretrieve (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['setting_type', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_setting_by_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `get_setting_by_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_setting_by_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/types/{settingType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_setting_definitions(self, group_id, type, **kwargs):  # noqa: E501
        """Retrieves SettingGroup definitions associated with the provided groupId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_definitions(group_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The resource id of the group to retrieve setting definitions for (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_setting_definitions_with_http_info(group_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_setting_definitions_with_http_info(group_id, type, **kwargs)  # noqa: E501
            return data

    def get_setting_definitions_with_http_info(self, group_id, type, **kwargs):  # noqa: E501
        """Retrieves SettingGroup definitions associated with the provided groupId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_setting_definitions_with_http_info(group_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: The resource id of the group to retrieve setting definitions for (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_setting_definitions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `get_setting_definitions`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_setting_definitions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/groups/{groupId}/definitions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_setting(self, body, sub_type, type, setting_id, **kwargs):  # noqa: E501
        """Updates a Setting it's referenced entities using the provided body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_setting(body, sub_type, type, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A JSON-LD representation of the updated setting (required)
        :param str sub_type: The specific type of Setting being updated (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :param str setting_id: The resource identifying the Setting to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_setting_with_http_info(body, sub_type, type, setting_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_setting_with_http_info(body, sub_type, type, setting_id, **kwargs)  # noqa: E501
            return data

    def update_setting_with_http_info(self, body, sub_type, type, setting_id, **kwargs):  # noqa: E501
        """Updates a Setting it's referenced entities using the provided body.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_setting_with_http_info(body, sub_type, type, setting_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: A JSON-LD representation of the updated setting (required)
        :param str sub_type: The specific type of Setting being updated (required)
        :param str type: The type of Setting to retrieve. For example `http://mobi.com/ontologies/setting#Preference` or`http://mobi.com/ontologies/setting#ApplicationSetting` (required)
        :param str setting_id: The resource identifying the Setting to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sub_type', 'type', 'setting_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_setting`")  # noqa: E501
        # verify the required parameter 'sub_type' is set
        if ('sub_type' not in params or
                params['sub_type'] is None):
            raise ValueError("Missing the required parameter `sub_type` when calling `update_setting`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `update_setting`")  # noqa: E501
        # verify the required parameter 'setting_id' is set
        if ('setting_id' not in params or
                params['setting_id'] is None):
            raise ValueError("Missing the required parameter `setting_id` when calling `update_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'setting_id' in params:
            path_params['settingId'] = params['setting_id']  # noqa: E501

        query_params = []
        if 'sub_type' in params:
            query_params.append(('subType', params['sub_type']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/settings/{settingId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
