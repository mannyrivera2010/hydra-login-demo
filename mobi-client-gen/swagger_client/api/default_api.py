# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def update_shapes_graph(self, record_id, **kwargs):  # noqa: E501
        """update_shapes_graph  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_shapes_graph(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :param str file:
        :param str json:
        :param str branch_id:
        :param str commit_id:
        :param bool replace_in_progress_commit:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_shapes_graph_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_shapes_graph_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def update_shapes_graph_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """update_shapes_graph  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_shapes_graph_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :param str file:
        :param str json:
        :param str branch_id:
        :param str commit_id:
        :param bool replace_in_progress_commit:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'file', 'json', 'branch_id', 'commit_id', 'replace_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_shapes_graph" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `update_shapes_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'json' in params:
            form_params.append(('json', params['json']))  # noqa: E501
        if 'branch_id' in params:
            form_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            form_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'replace_in_progress_commit' in params:
            form_params.append(('replaceInProgressCommit', params['replace_in_progress_commit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/shapes-graphs/{recordId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
