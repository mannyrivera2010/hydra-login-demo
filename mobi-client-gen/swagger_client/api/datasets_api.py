# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatasetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_dataset_record(self, dataset_record_id, **kwargs):  # noqa: E501
        """Clears the data within a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_dataset_record(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :param bool force: Whether or not the clear should be forced
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
            return data

    def clear_dataset_record_with_http_info(self, dataset_record_id, **kwargs):  # noqa: E501
        """Clears the data within a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_dataset_record_with_http_info(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :param bool force: Whether or not the clear should be forced
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_record_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_dataset_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_record_id' is set
        if ('dataset_record_id' not in params or
                params['dataset_record_id'] is None):
            raise ValueError("Missing the required parameter `dataset_record_id` when calling `clear_dataset_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_record_id' in params:
            path_params['datasetRecordId'] = params['dataset_record_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{datasetRecordId}/data', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_dataset_record(self, **kwargs):  # noqa: E501
        """Creates a new DatasetRecord in the local Catalog and Dataset in the specified repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset_record(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str repository_id:
        :param str dataset_iri:
        :param str description:
        :param str markdown:
        :param list[str] keywords:
        :param list[str] ontologies:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_dataset_record_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_dataset_record_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_dataset_record_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a new DatasetRecord in the local Catalog and Dataset in the specified repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_dataset_record_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str repository_id:
        :param str dataset_iri:
        :param str description:
        :param str markdown:
        :param list[str] keywords:
        :param list[str] ontologies:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'repository_id', 'dataset_iri', 'description', 'markdown', 'keywords', 'ontologies']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dataset_record" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'repository_id' in params:
            form_params.append(('repositoryId', params['repository_id']))  # noqa: E501
        if 'dataset_iri' in params:
            form_params.append(('datasetIRI', params['dataset_iri']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'markdown' in params:
            form_params.append(('markdown', params['markdown']))  # noqa: E501
        if 'keywords' in params:
            form_params.append(('keywords', params['keywords']))  # noqa: E501
            collection_formats['keywords'] = 'multi'  # noqa: E501
        if 'ontologies' in params:
            form_params.append(('ontologies', params['ontologies']))  # noqa: E501
            collection_formats['ontologies'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dataset_record(self, dataset_record_id, **kwargs):  # noqa: E501
        """Deletes a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset_record(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IRI dataset_record_id: (required)
        :param bool force: Whether or not the delete should be forced
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
            return data

    def delete_dataset_record_with_http_info(self, dataset_record_id, **kwargs):  # noqa: E501
        """Deletes a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dataset_record_with_http_info(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param IRI dataset_record_id: (required)
        :param bool force: Whether or not the delete should be forced
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_record_id', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dataset_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_record_id' is set
        if ('dataset_record_id' not in params or
                params['dataset_record_id'] is None):
            raise ValueError("Missing the required parameter `dataset_record_id` when calling `delete_dataset_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_record_id' in params:
            path_params['datasetRecordId'] = params['dataset_record_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{datasetRecordId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset_record(self, dataset_record_id, **kwargs):  # noqa: E501
        """Gets a specific DatasetRecord from the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_record(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_record_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
            return data

    def get_dataset_record_with_http_info(self, dataset_record_id, **kwargs):  # noqa: E501
        """Gets a specific DatasetRecord from the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_record_with_http_info(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_record_id' is set
        if ('dataset_record_id' not in params or
                params['dataset_record_id'] is None):
            raise ValueError("Missing the required parameter `dataset_record_id` when calling `get_dataset_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_record_id' in params:
            path_params['datasetRecordId'] = params['dataset_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{datasetRecordId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dataset_records(self, offset, limit, sort, **kwargs):  # noqa: E501
        """Retrieves all DatasetRecords in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_records(offset, limit, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for a page of DatasetRecords (required)
        :param int limit: Number of DatasetRecords to return in one page (required)
        :param str sort: IRI of the property to sort by (required)
        :param bool ascending: Whether or not the list should be sorted ascending or descending
        :param str search_text: Optional search text for the query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dataset_records_with_http_info(offset, limit, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dataset_records_with_http_info(offset, limit, sort, **kwargs)  # noqa: E501
            return data

    def get_dataset_records_with_http_info(self, offset, limit, sort, **kwargs):  # noqa: E501
        """Retrieves all DatasetRecords in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dataset_records_with_http_info(offset, limit, sort, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for a page of DatasetRecords (required)
        :param int limit: Number of DatasetRecords to return in one page (required)
        :param str sort: IRI of the property to sort by (required)
        :param bool ascending: Whether or not the list should be sorted ascending or descending
        :param str search_text: Optional search text for the query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'sort', 'ascending', 'search_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dataset_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_dataset_records`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_dataset_records`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in params or
                params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `get_dataset_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_data(self, dataset_record_id, **kwargs):  # noqa: E501
        """Uploads the data within an RDF file to a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_data(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :param DatasetRecordIdDataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_data_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_data_with_http_info(dataset_record_id, **kwargs)  # noqa: E501
            return data

    def upload_data_with_http_info(self, dataset_record_id, **kwargs):  # noqa: E501
        """Uploads the data within an RDF file to a specific DatasetRecord in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_data_with_http_info(dataset_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_record_id: IRI of a DatasetRecord (required)
        :param DatasetRecordIdDataBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_record_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_record_id' is set
        if ('dataset_record_id' not in params or
                params['dataset_record_id'] is None):
            raise ValueError("Missing the required parameter `dataset_record_id` when calling `upload_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_record_id' in params:
            path_params['datasetRecordId'] = params['dataset_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/datasets/{datasetRecordId}/data', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
