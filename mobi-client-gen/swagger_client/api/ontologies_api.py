# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OntologiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_annotation_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new annotation to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_annotation_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new annotation in JSON-LD (required)
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_annotation_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_annotation_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_annotation_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new annotation to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_annotation_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new annotation in JSON-LD (required)
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_annotation_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_annotation_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_annotation_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/annotations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_class_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new class to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new class model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_class_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_class_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_class_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new class to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new class model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_class_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_class_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_class_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/classes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_data_property_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new data property to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_data_property_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON String representing the new property model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_data_property_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_data_property_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_data_property_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new data property to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_data_property_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON String representing the new property model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_data_property_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_data_property_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_data_property_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/data-properties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_datatype_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new datatype to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_datatype_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON String representing the new datatype model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_datatype_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_datatype_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_datatype_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new datatype to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_datatype_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON String representing the new datatype model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_datatype_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_datatype_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_datatype_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/datatypes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_individual_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new individual to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_individual_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new individual model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_individual_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_individual_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_individual_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new individual to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_individual_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new individual model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_individual_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_individual_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_individual_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/named-individuals', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_object_property_to_ontology(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new object property to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_object_property_to_ontology(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new property model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_object_property_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_object_property_to_ontology_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def add_object_property_to_ontology_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Adds a new object property to the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_object_property_to_ontology_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the new property model (required)
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_object_property_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_object_property_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `add_object_property_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/object-properties', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_annotation_from_ontology(self, record_id, annotation_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_annotation_from_ontology(record_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str annotation_id: String representing the annotation Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_annotation_from_ontology_with_http_info(record_id, annotation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_annotation_from_ontology_with_http_info(record_id, annotation_id, **kwargs)  # noqa: E501
            return data

    def delete_annotation_from_ontology_with_http_info(self, record_id, annotation_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_annotation_from_ontology_with_http_info(record_id, annotation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str annotation_id: String representing the annotation Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'annotation_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_annotation_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_annotation_from_ontology`")  # noqa: E501
        # verify the required parameter 'annotation_id' is set
        if ('annotation_id' not in params or
                params['annotation_id'] is None):
            raise ValueError("Missing the required parameter `annotation_id` when calling `delete_annotation_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'annotation_id' in params:
            path_params['annotationId'] = params['annotation_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/annotations/{annotationId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_class_from_ontology(self, record_id, class_id, **kwargs):  # noqa: E501
        """Deletes the identified class from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_class_from_ontology(record_id, class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str class_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_class_from_ontology_with_http_info(record_id, class_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_class_from_ontology_with_http_info(record_id, class_id, **kwargs)  # noqa: E501
            return data

    def delete_class_from_ontology_with_http_info(self, record_id, class_id, **kwargs):  # noqa: E501
        """Deletes the identified class from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_class_from_ontology_with_http_info(record_id, class_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str class_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'class_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_class_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_class_from_ontology`")  # noqa: E501
        # verify the required parameter 'class_id' is set
        if ('class_id' not in params or
                params['class_id'] is None):
            raise ValueError("Missing the required parameter `class_id` when calling `delete_class_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'class_id' in params:
            path_params['classId'] = params['class_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/classes/{classId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_data_property_from_ontology(self, record_id, data_property_id, **kwargs):  # noqa: E501
        """Deletes the identified data property from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_data_property_from_ontology(record_id, data_property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str data_property_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_data_property_from_ontology_with_http_info(record_id, data_property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_data_property_from_ontology_with_http_info(record_id, data_property_id, **kwargs)  # noqa: E501
            return data

    def delete_data_property_from_ontology_with_http_info(self, record_id, data_property_id, **kwargs):  # noqa: E501
        """Deletes the identified data property from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_data_property_from_ontology_with_http_info(record_id, data_property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str data_property_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'data_property_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_data_property_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_data_property_from_ontology`")  # noqa: E501
        # verify the required parameter 'data_property_id' is set
        if ('data_property_id' not in params or
                params['data_property_id'] is None):
            raise ValueError("Missing the required parameter `data_property_id` when calling `delete_data_property_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'data_property_id' in params:
            path_params['dataPropertyId'] = params['data_property_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/data-properties/{dataPropertyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_datatype_from_ontology(self, record_id, datatype_id, **kwargs):  # noqa: E501
        """Deletes the identified datatype from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datatype_from_ontology(record_id, datatype_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str datatype_id: String representing the datatype Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_datatype_from_ontology_with_http_info(record_id, datatype_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_datatype_from_ontology_with_http_info(record_id, datatype_id, **kwargs)  # noqa: E501
            return data

    def delete_datatype_from_ontology_with_http_info(self, record_id, datatype_id, **kwargs):  # noqa: E501
        """Deletes the identified datatype from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_datatype_from_ontology_with_http_info(record_id, datatype_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str datatype_id: String representing the datatype Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'datatype_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_datatype_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_datatype_from_ontology`")  # noqa: E501
        # verify the required parameter 'datatype_id' is set
        if ('datatype_id' not in params or
                params['datatype_id'] is None):
            raise ValueError("Missing the required parameter `datatype_id` when calling `delete_datatype_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'datatype_id' in params:
            path_params['datatypeId'] = params['datatype_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/datatypes/{datatypeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_individual_from_ontology(self, record_id, individual_id, **kwargs):  # noqa: E501
        """Deletes the identified individual from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_individual_from_ontology(record_id, individual_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str individual_id: String representing the individual Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_individual_from_ontology_with_http_info(record_id, individual_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_individual_from_ontology_with_http_info(record_id, individual_id, **kwargs)  # noqa: E501
            return data

    def delete_individual_from_ontology_with_http_info(self, record_id, individual_id, **kwargs):  # noqa: E501
        """Deletes the identified individual from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_individual_from_ontology_with_http_info(record_id, individual_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str individual_id: String representing the individual Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'individual_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_individual_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_individual_from_ontology`")  # noqa: E501
        # verify the required parameter 'individual_id' is set
        if ('individual_id' not in params or
                params['individual_id'] is None):
            raise ValueError("Missing the required parameter `individual_id` when calling `delete_individual_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'individual_id' in params:
            path_params['individualId'] = params['individual_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/named-individuals/{individualId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_object_property_from_ontology(self, record_id, object_property_id, **kwargs):  # noqa: E501
        """Deletes the identified object property from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_property_from_ontology(record_id, object_property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str object_property_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_object_property_from_ontology_with_http_info(record_id, object_property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_object_property_from_ontology_with_http_info(record_id, object_property_id, **kwargs)  # noqa: E501
            return data

    def delete_object_property_from_ontology_with_http_info(self, record_id, object_property_id, **kwargs):  # noqa: E501
        """Deletes the identified object property from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_object_property_from_ontology_with_http_info(record_id, object_property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str object_property_id: String representing the class Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'object_property_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_object_property_from_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_object_property_from_ontology`")  # noqa: E501
        # verify the required parameter 'object_property_id' is set
        if ('object_property_id' not in params or
                params['object_property_id'] is None):
            raise ValueError("Missing the required parameter `object_property_id` when calling `delete_object_property_from_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'object_property_id' in params:
            path_params['objectPropertyId'] = params['object_property_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/object-properties/{objectPropertyId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ontology(self, record_id, **kwargs):  # noqa: E501
        """Deletes the OntologyRecord with the requested recordId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def delete_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Deletes the OntologyRecord with the requested recordId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ontology_branch(self, record_id, branch_id, **kwargs):  # noqa: E501
        """Deletes the Branch with the requested BranchId from the OntologyRecord with the provided recordId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ontology_branch(record_id, branch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ontology_branch_with_http_info(record_id, branch_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ontology_branch_with_http_info(record_id, branch_id, **kwargs)  # noqa: E501
            return data

    def delete_ontology_branch_with_http_info(self, record_id, branch_id, **kwargs):  # noqa: E501
        """Deletes the Branch with the requested BranchId from the OntologyRecord with the provided recordId  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ontology_branch_with_http_info(record_id, branch_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ontology_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `delete_ontology_branch`")  # noqa: E501
        # verify the required parameter 'branch_id' is set
        if ('branch_id' not in params or
                params['branch_id'] is None):
            raise ValueError("Missing the required parameter `branch_id` when calling `delete_ontology_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'branch_id' in params:
            path_params['branchId'] = params['branch_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/branches/{branchId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_annotations_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the annotations from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_annotations_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_annotations_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_annotations_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the annotations from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_annotations_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_annotations_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_annotations_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the annotations in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_annotations_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_annotations_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_annotations_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the annotations in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_annotations_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_annotations_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_annotations_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/annotations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classes_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classes_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classes_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_classes_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_classes_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-classes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classes_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Boolean indicating whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classes_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classes_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_classes_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Boolean indicating whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_classes_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/classes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_classes_with_individuals(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes with individuals in a hierarchical structure for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_with_individuals(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_classes_with_individuals_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_classes_with_individuals_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_classes_with_individuals_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the classes with individuals in a hierarchical structure for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_classes_with_individuals_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes_with_individuals" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_classes_with_individuals`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/classes-with-individuals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_concept_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the concept hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concept_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_concept_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_concept_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the concept hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_concept_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/concept-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_concept_scheme_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the concept hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_scheme_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concept_scheme_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_concept_scheme_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_concept_scheme_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the concept hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_scheme_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_scheme_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_concept_scheme_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/concept-scheme-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_properties_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the data properties from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_properties_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_properties_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_data_properties_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the data properties from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_properties_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_data_properties_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-data-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_data_properties_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the data properties from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_data_properties_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_data_properties_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_data_properties_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the data properties from the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_data_properties_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_properties_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_data_properties_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/data-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datatypes_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the datatypes from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datatypes_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datatypes_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datatypes_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_datatypes_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the datatypes from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datatypes_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datatypes_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_datatypes_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-datatypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_datatypes_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the datatypes in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datatypes_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_datatypes_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_datatypes_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_datatypes_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the datatypes in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_datatypes_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_datatypes_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_datatypes_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/datatypes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity(self, record_id, entity_id, **kwargs):  # noqa: E501
        """Retrieves the triples for a specified entity including all of is transitively attached Blank Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity(record_id, entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str entity_id: String representing the entity Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param str format: Specified format for the return data. Valid values include 'jsonld', 'turtle', 'rdf/xml', and 'trig'
        :param bool include_imports: Boolean indicating whether or not ontology imports should be included in the query
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_with_http_info(record_id, entity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_with_http_info(record_id, entity_id, **kwargs)  # noqa: E501
            return data

    def get_entity_with_http_info(self, record_id, entity_id, **kwargs):  # noqa: E501
        """Retrieves the triples for a specified entity including all of is transitively attached Blank Node  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_with_http_info(record_id, entity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str entity_id: String representing the entity Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param str format: Specified format for the return data. Valid values include 'jsonld', 'turtle', 'rdf/xml', and 'trig'
        :param bool include_imports: Boolean indicating whether or not ontology imports should be included in the query
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'entity_id', 'branch_id', 'commit_id', 'format', 'include_imports', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_entity`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_entity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'entity_id' in params:
            path_params['entityId'] = params['entity_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'include_imports' in params:
            query_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/entities/{entityId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity_names(self, body, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_names(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Filter JSON (required)
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool include_imports: Boolean indicating whether or not any imports
        :param bool apply_in_progress_commit: Boolean indicating whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_names_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_names_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def get_entity_names_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_names_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Filter JSON (required)
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool include_imports: Boolean indicating whether or not any imports
        :param bool apply_in_progress_commit: Boolean indicating whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id', 'branch_id', 'commit_id', 'include_imports', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `get_entity_names`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_entity_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            query_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/entity-names', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_entity_usages(self, record_id, entity_iri, **kwargs):  # noqa: E501
        """Gets the usages of the identified entity in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_usages(record_id, entity_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str entity_iri: String representing the entity Resource IRI (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param str query_type: String identifying whether you want to do a select or construct query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_entity_usages_with_http_info(record_id, entity_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.get_entity_usages_with_http_info(record_id, entity_iri, **kwargs)  # noqa: E501
            return data

    def get_entity_usages_with_http_info(self, record_id, entity_iri, **kwargs):  # noqa: E501
        """Gets the usages of the identified entity in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_entity_usages_with_http_info(record_id, entity_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str entity_iri: String representing the entity Resource IRI (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param str query_type: String identifying whether you want to do a select or construct query
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'entity_iri', 'branch_id', 'commit_id', 'query_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_usages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_entity_usages`")  # noqa: E501
        # verify the required parameter 'entity_iri' is set
        if ('entity_iri' not in params or
                params['entity_iri'] is None):
            raise ValueError("Missing the required parameter `entity_iri` when calling `get_entity_usages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501
        if 'entity_iri' in params:
            path_params['entityIri'] = params['entity_iri']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'query_type' in params:
            query_params.append(('queryType', params['query_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/entity-usages/{entityIri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_failed_imports(self, record_id, **kwargs):  # noqa: E501
        """Gets a list of ontology IRIs that were not imported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_imports(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_failed_imports_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_failed_imports_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_failed_imports_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets a list of ontology IRIs that were not imported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_failed_imports_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_failed_imports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_failed_imports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/failed-imports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_imported_ontology_ir_is(self, record_id, **kwargs):  # noqa: E501
        """Gets the imported ontology IRIs of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_imported_ontology_ir_is(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_imported_ontology_ir_is_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_imported_ontology_ir_is_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_imported_ontology_ir_is_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the imported ontology IRIs of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_imported_ontology_ir_is_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_imported_ontology_ir_is" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_imported_ontology_ir_is`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-ontology-iris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_imports_closure(self, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_imports_closure(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str rdf_format: Desired RDF return format
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_imports_closure_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_imports_closure_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_imports_closure_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_imports_closure_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str rdf_format: Desired RDF return format
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'rdf_format', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_imports_closure" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_imports_closure`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'rdf_format' in params:
            query_params.append(('rdfFormat', params['rdf_format']))  # noqa: E501
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-ontologies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ir_is_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the IRIs from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ir_is_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ir_is_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ir_is_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ir_is_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the IRIs from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ir_is_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ir_is_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ir_is_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-iris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ir_is_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the IRIs in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ir_is_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ir_is_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ir_is_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ir_is_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the IRIs in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ir_is_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ir_is_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ir_is_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/iris', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_named_individuals_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the named individuals from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_named_individuals_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_named_individuals_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_named_individuals_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_named_individuals_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the named individuals from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_named_individuals_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_named_individuals_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_named_individuals_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-named-individuals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_named_individuals_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the individuals in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_named_individuals_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_named_individuals_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_named_individuals_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_named_individuals_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the individuals in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_named_individuals_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_named_individuals_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_named_individuals_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/named-individuals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_properties_in_imported_ontologies(self, record_id, **kwargs):  # noqa: E501
        """Gets the object properties from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties_in_imported_ontologies(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_properties_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_properties_in_imported_ontologies_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_object_properties_in_imported_ontologies_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the object properties from the imported ontologies of the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties_in_imported_ontologies_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether to apply in progress commit
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_properties_in_imported_ontologies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_object_properties_in_imported_ontologies`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/imported-object-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_object_properties_in_ontology(self, record_id, **kwargs):  # noqa: E501
        """Gets the object properties in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties_in_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_object_properties_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_object_properties_in_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_object_properties_in_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the object properties in the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_object_properties_in_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_object_properties_in_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_object_properties_in_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/object-properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology(self, record_id, **kwargs):  # noqa: E501
        """Returns the ontology associated with the requested record ID in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :param str branch_id: Optional String representing the Branch Resource id. NOTE: Assumes id represents an IRI unless String begins with \"_:\". Defaults to Master branch if missing
        :param str commit_id: Optional String representing the Commit Resource id. NOTE: Assumes id represents an IRI unless String begins with \"_:\". Defaults to head commit if missing. The provided commitId must be on the Branch identified by the provided branchId; otherwise, nothing will be returned
        :param str rdf_format: Desired RDF return format
        :param bool clear_cache: Whether or not the cached version of the identified Ontology should be cleared before retrieval
        :param bool skolemize: Whether or not the JSON-LD of the ontology should be skolemized.
        :param bool apply_in_progress_commit: Whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Returns the ontology associated with the requested record ID in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID. NOTE: Assumes id represents an IRI unless String begins with \"_:\" (required)
        :param str branch_id: Optional String representing the Branch Resource id. NOTE: Assumes id represents an IRI unless String begins with \"_:\". Defaults to Master branch if missing
        :param str commit_id: Optional String representing the Commit Resource id. NOTE: Assumes id represents an IRI unless String begins with \"_:\". Defaults to head commit if missing. The provided commitId must be on the Branch identified by the provided branchId; otherwise, nothing will be returned
        :param str rdf_format: Desired RDF return format
        :param bool clear_cache: Whether or not the cached version of the identified Ontology should be cleared before retrieval
        :param bool skolemize: Whether or not the JSON-LD of the ontology should be skolemized.
        :param bool apply_in_progress_commit: Whether or not any in progress commits by user should be applied to the return value
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'rdf_format', 'clear_cache', 'skolemize', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'rdf_format' in params:
            query_params.append(('rdfFormat', params['rdf_format']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clearCache', params['clear_cache']))  # noqa: E501
        if 'skolemize' in params:
            query_params.append(('skolemize', params['skolemize']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_annotation_property_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the data property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_annotation_property_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_annotation_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_annotation_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_annotation_property_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the data property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_annotation_property_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_annotation_property_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology_annotation_property_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/annotation-property-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_class_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the class hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_class_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_class_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_class_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_class_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the class hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_class_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_class_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology_class_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/class-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_data_property_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the data property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_data_property_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_data_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_data_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_data_property_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the data property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_data_property_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_data_property_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology_data_property_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/data-property-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_object_property_hierarchy(self, record_id, **kwargs):  # noqa: E501
        """Gets the object property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_object_property_hierarchy(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_object_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_object_property_hierarchy_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_object_property_hierarchy_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the object property hierarchies for the identified ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_object_property_hierarchy_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool nested: Whether to return the nested JSON-LD version of the hierarchy
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'nested']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_object_property_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology_object_property_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'nested' in params:
            query_params.append(('nested', params['nested']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/object-property-hierarchies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ontology_stuff(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of all the OWL ontology related information about the ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_stuff(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool clear_cache: Boolean to decide to clear cache
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ontology_stuff_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ontology_stuff_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_ontology_stuff_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of all the OWL ontology related information about the ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ontology_stuff_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool clear_cache: Boolean to decide to clear cache
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'clear_cache', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ontology_stuff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_ontology_stuff`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'clear_cache' in params:
            query_params.append(('clearCache', params['clear_cache']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/ontology-stuff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_property_to_ranges(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of the properties Ranges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_to_ranges(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_property_to_ranges_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_property_to_ranges_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_property_to_ranges_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of the properties Ranges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_property_to_ranges_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_property_to_ranges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_property_to_ranges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/property-ranges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_search_results(self, record_id, **kwargs):  # noqa: E501
        """Gets the search results from the identified ontology using the provided searchText  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_results(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str search_text: String for the text that is searched for in all of the Literals within the ontology with the requested record ID
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_search_results_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_search_results_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_search_results_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets the search results from the identified ontology using the provided searchText  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_search_results_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str search_text: String for the text that is searched for in all of the Literals within the ontology with the requested record ID
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'search_text', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_search_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_search_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'search_text' in params:
            query_params.append(('searchText', params['search_text']))  # noqa: E501
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/search-results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_vocabulary_stuff(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of all the SKOS vocabulary related information about the ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vocabulary_stuff(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_vocabulary_stuff_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_vocabulary_stuff_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_vocabulary_stuff_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Gets a JSON representation of all the SKOS vocabulary related information about the ontology  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_vocabulary_stuff_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vocabulary_stuff" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_vocabulary_stuff`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/vocabulary-stuff', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_url_encoded_download_query_ontology(self, record_id, **kwargs):  # noqa: E501
        """Downloads the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_url_encoded_download_query_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str body:
        :param str branch_id: Optional Branch ID representing the branch IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str commit_id: Optional Commit ID representing the commit IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool include_imports: Optional boolean representing whether to include imported ontologies when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool apply_in_progress_commit: Optional boolean representing whether to apply the in progress commit when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_name2: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type2: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_url_encoded_download_query_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_url_encoded_download_query_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def post_url_encoded_download_query_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Downloads the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_url_encoded_download_query_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str body:
        :param str branch_id: Optional Branch ID representing the branch IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str commit_id: Optional Commit ID representing the commit IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool include_imports: Optional boolean representing whether to include imported ontologies when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool apply_in_progress_commit: Optional boolean representing whether to apply the in progress commit when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_name2: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type2: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'body', 'branch_id', 'commit_id', 'include_imports', 'apply_in_progress_commit', 'file_name2', 'file_type2', 'file_name', 'file_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_url_encoded_download_query_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `post_url_encoded_download_query_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            query_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'branch_id' in params:
            form_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            form_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            form_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            form_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_url_encoded_download_query_ontology(self, record_id, **kwargs):  # noqa: E501
        """Downloads the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_url_encoded_download_query_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str query:
        :param str branch_id2:
        :param str commit_id2:
        :param bool include_imports2:
        :param bool apply_in_progress_commit2:
        :param str branch_id: Optional Branch ID representing the branch IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str commit_id: Optional Commit ID representing the commit IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool include_imports: Optional boolean representing whether to include imported ontologies when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool apply_in_progress_commit: Optional boolean representing whether to apply the in progress commit when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_name2: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type2: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_url_encoded_download_query_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_url_encoded_download_query_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def post_url_encoded_download_query_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Downloads the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_url_encoded_download_query_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str query:
        :param str branch_id2:
        :param str commit_id2:
        :param bool include_imports2:
        :param bool apply_in_progress_commit2:
        :param str branch_id: Optional Branch ID representing the branch IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str commit_id: Optional Commit ID representing the commit IRI of the Record to query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool include_imports: Optional boolean representing whether to include imported ontologies when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param bool apply_in_progress_commit: Optional boolean representing whether to apply the in progress commit when executing the query when the `CONTENT-TYPE` is **NOT** set to `application/x-www-form-urlencoded`
        :param str file_name2: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type2: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_name: File name of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :param str file_type: Format of the downloaded results file when the `ACCEPT` header is set to `application/octet-stream`
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'query', 'branch_id2', 'commit_id2', 'include_imports2', 'apply_in_progress_commit2', 'branch_id', 'commit_id', 'include_imports', 'apply_in_progress_commit', 'file_name2', 'file_type2', 'file_name', 'file_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_url_encoded_download_query_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `post_url_encoded_download_query_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            query_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'file_type' in params:
            query_params.append(('fileType', params['file_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'query' in params:
            form_params.append(('query', params['query']))  # noqa: E501
        if 'branch_id' in params:
            form_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            form_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            form_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            form_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'text/turtle', 'application/ld+json', 'application/rdf+xml', 'application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/sparql-query', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/query', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_ontology(self, record_id, query, **kwargs):  # noqa: E501
        """Retrieves the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_ontology(record_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str query: SPARQL Query to perform against ontology (required)
        :param str branch_id: String representing the Commit Resource ID
        :param str commit_id: String representing the Branch Resource ID
        :param bool include_imports: Boolean indicating whether or not ontology imports should be included in the query
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_ontology_with_http_info(record_id, query, **kwargs)  # noqa: E501
        else:
            (data) = self.query_ontology_with_http_info(record_id, query, **kwargs)  # noqa: E501
            return data

    def query_ontology_with_http_info(self, record_id, query, **kwargs):  # noqa: E501
        """Retrieves the SPARQL query results of an ontology, and its import closures in the requested format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_ontology_with_http_info(record_id, query, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str query: SPARQL Query to perform against ontology (required)
        :param str branch_id: String representing the Commit Resource ID
        :param str commit_id: String representing the Branch Resource ID
        :param bool include_imports: Boolean indicating whether or not ontology imports should be included in the query
        :param bool apply_in_progress_commit: Whether or not to apply the in progress commit for the user making the request
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'query', 'branch_id', 'commit_id', 'include_imports', 'apply_in_progress_commit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `query_ontology`")  # noqa: E501
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `query_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'include_imports' in params:
            query_params.append(('includeImports', params['include_imports']))  # noqa: E501
        if 'apply_in_progress_commit' in params:
            query_params.append(('applyInProgressCommit', params['apply_in_progress_commit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}/query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def save_changes_to_ontology(self, body, entity_id, record_id, **kwargs):  # noqa: E501
        """Updates the requester's InProgressCommit with the provided entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_changes_to_ontology(body, entity_id, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the edited Resource (required)
        :param str entity_id: String representing the edited entity id (required)
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.save_changes_to_ontology_with_http_info(body, entity_id, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.save_changes_to_ontology_with_http_info(body, entity_id, record_id, **kwargs)  # noqa: E501
            return data

    def save_changes_to_ontology_with_http_info(self, body, entity_id, record_id, **kwargs):  # noqa: E501
        """Updates the requester's InProgressCommit with the provided entity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.save_changes_to_ontology_with_http_info(body, entity_id, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: String representing the edited Resource (required)
        :param str entity_id: String representing the edited entity id (required)
        :param str record_id: String representing the Record Resource ID (required)
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'entity_id', 'record_id', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_changes_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `save_changes_to_ontology`")  # noqa: E501
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params or
                params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `save_changes_to_ontology`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `save_changes_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_changes_to_ontology(self, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_changes_to_ontology(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str file:
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_changes_to_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_changes_to_ontology_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def upload_changes_to_ontology_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Updates the specified ontology branch and commit with the data provided  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_changes_to_ontology_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: String representing the Record Resource ID (required)
        :param str file:
        :param str branch_id: String representing the Branch Resource ID
        :param str commit_id: String representing the Commit Resource ID
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id', 'file', 'branch_id', 'commit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_changes_to_ontology" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `upload_changes_to_ontology`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []
        if 'branch_id' in params:
            query_params.append(('branchId', params['branch_id']))  # noqa: E501
        if 'commit_id' in params:
            query_params.append(('commitId', params['commit_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies/{recordId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, **kwargs):  # noqa: E501
        """Uploads an ontology file to the data store  # noqa: E501

        Uploads and imports an ontology file to a data store and creates an associated OntologyRecord using the form data. A master Branch is created and stored with an initial Commit containing the data provided in the ontology file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :param str json:
        :param str title:
        :param str description:
        :param str markdown:
        :param list[str] keywords:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def upload_file_with_http_info(self, **kwargs):  # noqa: E501
        """Uploads an ontology file to the data store  # noqa: E501

        Uploads and imports an ontology file to a data store and creates an associated OntologyRecord using the form data. A master Branch is created and stored with an initial Commit containing the data provided in the ontology file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file:
        :param str json:
        :param str title:
        :param str description:
        :param str markdown:
        :param list[str] keywords:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'json', 'title', 'description', 'markdown', 'keywords']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'json' in params:
            form_params.append(('json', params['json']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'markdown' in params:
            form_params.append(('markdown', params['markdown']))  # noqa: E501
        if 'keywords' in params:
            form_params.append(('keywords', params['keywords']))  # noqa: E501
            collection_formats['keywords'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ontologies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
