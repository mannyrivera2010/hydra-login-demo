# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExplorableDatasetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_instance(self, body, record_iri, **kwargs):  # noqa: E501
        """Creates an instance of a particular class type in a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instance(body, record_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: New Instance JSON (required)
        :param str record_iri: Id of the DatasetRecord for the Dataset (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_instance_with_http_info(body, record_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.create_instance_with_http_info(body, record_iri, **kwargs)  # noqa: E501
            return data

    def create_instance_with_http_info(self, body, record_iri, **kwargs):  # noqa: E501
        """Creates an instance of a particular class type in a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_instance_with_http_info(body, record_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: New Instance JSON (required)
        :param str record_iri: Id of the DatasetRecord for the Dataset (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_instance`")  # noqa: E501
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `create_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/instances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_instance(self, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Deletes an instance by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_instance(record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset (required)
        :param str instance_iri: IRI of the instance to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_instance_with_http_info(record_iri, instance_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_instance_with_http_info(record_iri, instance_iri, **kwargs)  # noqa: E501
            return data

    def delete_instance_with_http_info(self, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Deletes an instance by its ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_instance_with_http_info(record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset (required)
        :param str instance_iri: IRI of the instance to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_iri', 'instance_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `delete_instance`")  # noqa: E501
        # verify the required parameter 'instance_iri' is set
        if ('instance_iri' not in params or
                params['instance_iri'] is None):
            raise ValueError("Missing the required parameter `instance_iri` when calling `delete_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501
        if 'instance_iri' in params:
            path_params['instanceIRI'] = params['instance_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/instances/{instanceIRI}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_class_details(self, record_iri, **kwargs):  # noqa: E501
        """Retrieves all the data associated with ontology objects, from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_class_details(record_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: ID of the DatasetRecord for the Dataset from which to retrieve the data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_class_details_with_http_info(record_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.get_class_details_with_http_info(record_iri, **kwargs)  # noqa: E501
            return data

    def get_class_details_with_http_info(self, record_iri, **kwargs):  # noqa: E501
        """Retrieves all the data associated with ontology objects, from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_class_details_with_http_info(record_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: ID of the DatasetRecord for the Dataset from which to retrieve the data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_class_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `get_class_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/class-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_class_property_details(self, record_iri, class_iri, **kwargs):  # noqa: E501
        """Retrieves a list of all properties available for a class from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_class_property_details(record_iri, class_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: Id of the DatasetRecord for the Dataset to summarize (required)
        :param str class_iri: IRI of the class type to get property details for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_class_property_details_with_http_info(record_iri, class_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.get_class_property_details_with_http_info(record_iri, class_iri, **kwargs)  # noqa: E501
            return data

    def get_class_property_details_with_http_info(self, record_iri, class_iri, **kwargs):  # noqa: E501
        """Retrieves a list of all properties available for a class from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_class_property_details_with_http_info(record_iri, class_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: Id of the DatasetRecord for the Dataset to summarize (required)
        :param str class_iri: IRI of the class type to get property details for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_iri', 'class_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_class_property_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `get_class_property_details`")  # noqa: E501
        # verify the required parameter 'class_iri' is set
        if ('class_iri' not in params or
                params['class_iri'] is None):
            raise ValueError("Missing the required parameter `class_iri` when calling `get_class_property_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501
        if 'class_iri' in params:
            path_params['classIRI'] = params['class_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/classes/{classIRI}/property-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_instance(self, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Retrieves an instance of a particular class type from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instance(record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset to summarize (required)
        :param str instance_iri: IRI of the instance to get (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_instance_with_http_info(record_iri, instance_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.get_instance_with_http_info(record_iri, instance_iri, **kwargs)  # noqa: E501
            return data

    def get_instance_with_http_info(self, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Retrieves an instance of a particular class type from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instance_with_http_info(record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset to summarize (required)
        :param str instance_iri: IRI of the instance to get (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_iri', 'instance_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `get_instance`")  # noqa: E501
        # verify the required parameter 'instance_iri' is set
        if ('instance_iri' not in params or
                params['instance_iri'] is None):
            raise ValueError("Missing the required parameter `instance_iri` when calling `get_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501
        if 'instance_iri' in params:
            path_params['instanceIRI'] = params['instance_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/instances/{instanceIRI}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_instance_details(self, record_iri, class_iri, offset, limit, **kwargs):  # noqa: E501
        """Retrieves an aggregated summary of all ontology objects from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instance_details(record_iri, class_iri, offset, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset to summarize (required)
        :param str class_iri: IRI of the class type to get (required)
        :param int offset: Offset for a page of Dataset data (required)
        :param int limit: Number of data to return in one page (required)
        :param bool ascending: Whether or not the list should be sorted ascending or descending
        :param bool infer: Whether or not the list should include inferred instances
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_instance_details_with_http_info(record_iri, class_iri, offset, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_instance_details_with_http_info(record_iri, class_iri, offset, limit, **kwargs)  # noqa: E501
            return data

    def get_instance_details_with_http_info(self, record_iri, class_iri, offset, limit, **kwargs):  # noqa: E501
        """Retrieves an aggregated summary of all ontology objects from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_instance_details_with_http_info(record_iri, class_iri, offset, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_iri: IRI of the DatasetRecord for the Dataset to summarize (required)
        :param str class_iri: IRI of the class type to get (required)
        :param int offset: Offset for a page of Dataset data (required)
        :param int limit: Number of data to return in one page (required)
        :param bool ascending: Whether or not the list should be sorted ascending or descending
        :param bool infer: Whether or not the list should include inferred instances
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_iri', 'class_iri', 'offset', 'limit', 'ascending', 'infer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_instance_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `get_instance_details`")  # noqa: E501
        # verify the required parameter 'class_iri' is set
        if ('class_iri' not in params or
                params['class_iri'] is None):
            raise ValueError("Missing the required parameter `class_iri` when calling `get_instance_details`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_instance_details`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_instance_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501
        if 'class_iri' in params:
            path_params['classIRI'] = params['class_iri']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501
        if 'infer' in params:
            query_params.append(('infer', params['infer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/classes/{classIRI}/instance-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_instance(self, body, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Updates an instance of a particular class type from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_instance(body, record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Instance JSON-LD (required)
        :param str record_iri: Id of the DatasetRecord for the Dataset to summarize. (required)
        :param str instance_iri: IRI of the instance to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_instance_with_http_info(body, record_iri, instance_iri, **kwargs)  # noqa: E501
        else:
            (data) = self.update_instance_with_http_info(body, record_iri, instance_iri, **kwargs)  # noqa: E501
            return data

    def update_instance_with_http_info(self, body, record_iri, instance_iri, **kwargs):  # noqa: E501
        """Updates an instance of a particular class type from a Dataset in the local Catalog  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_instance_with_http_info(body, record_iri, instance_iri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: Instance JSON-LD (required)
        :param str record_iri: Id of the DatasetRecord for the Dataset to summarize. (required)
        :param str instance_iri: IRI of the instance to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_iri', 'instance_iri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_instance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_instance`")  # noqa: E501
        # verify the required parameter 'record_iri' is set
        if ('record_iri' not in params or
                params['record_iri'] is None):
            raise ValueError("Missing the required parameter `record_iri` when calling `update_instance`")  # noqa: E501
        # verify the required parameter 'instance_iri' is set
        if ('instance_iri' not in params or
                params['instance_iri'] is None):
            raise ValueError("Missing the required parameter `instance_iri` when calling `update_instance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_iri' in params:
            path_params['recordIRI'] = params['record_iri']  # noqa: E501
        if 'instance_iri' in params:
            path_params['instanceIRI'] = params['instance_iri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/explorable-datasets/{recordIRI}/instances/{instanceIRI}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
