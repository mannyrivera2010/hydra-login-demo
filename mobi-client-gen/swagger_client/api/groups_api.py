# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_group_roles(self, group_title, **kwargs):  # noqa: E501
        """Add roles to a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_roles(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to add a role to (required)
        :param list[str] roles:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_group_roles_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.add_group_roles_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def add_group_roles_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """Add roles to a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_roles_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to add a role to (required)
        :param list[str] roles:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title', 'roles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `add_group_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
            collection_formats['roles'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/roles', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_group_user(self, group_title, **kwargs):  # noqa: E501
        """Add a Mobi User to a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_user(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to add users to (required)
        :param list[str] users:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_group_user_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.add_group_user_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def add_group_user_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """Add a Mobi User to a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_group_user_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to add users to (required)
        :param list[str] users:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title', 'users']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_group_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `add_group_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []
        if 'users' in params:
            query_params.append(('users', params['users']))  # noqa: E501
            collection_formats['users'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/users', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group(self, **kwargs):  # noqa: E501
        """Create a new Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str description:
        :param list[str] roles:
        :param list[str] members:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str description:
        :param list[str] roles:
        :param list[str] members:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'description', 'roles', 'members']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'roles' in params:
            form_params.append(('roles', params['roles']))  # noqa: E501
            collection_formats['roles'] = 'multi'  # noqa: E501
        if 'members' in params:
            form_params.append(('members', params['members']))  # noqa: E501
            collection_formats['members'] = 'multi'  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_group(self, group_title, **kwargs):  # noqa: E501
        """Remove a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_group_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_group_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def delete_group_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """Remove a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group(self, group_title, **kwargs):  # noqa: E501
        """Get a single Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def get_group_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """Get a single Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `get_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_roles(self, group_title, **kwargs):  # noqa: E501
        """List roles of a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_roles(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve roles from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_roles_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_roles_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def get_group_roles_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """List roles of a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_roles_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve roles from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `get_group_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_group_users(self, group_title, **kwargs):  # noqa: E501
        """List users of a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_users(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve users from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_group_users_with_http_info(group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.get_group_users_with_http_info(group_title, **kwargs)  # noqa: E501
            return data

    def get_group_users_with_http_info(self, group_title, **kwargs):  # noqa: E501
        """List users of a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_group_users_with_http_info(group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to retrieve users from (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_group_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `get_group_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_groups(self, **kwargs):  # noqa: E501
        """Get all Mobi Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get all Mobi Groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_group_role(self, group_title, role, **kwargs):  # noqa: E501
        """Remove role from a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_group_role(group_title, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove a role from (required)
        :param str role: Role to remove from the specified Group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_group_role_with_http_info(group_title, role, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_group_role_with_http_info(group_title, role, **kwargs)  # noqa: E501
            return data

    def remove_group_role_with_http_info(self, group_title, role, **kwargs):  # noqa: E501
        """Remove role from a Mobi Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_group_role_with_http_info(group_title, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove a role from (required)
        :param str role: Role to remove from the specified Group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_group_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `remove_group_role`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `remove_group_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/roles', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_group_user(self, group_title, user, **kwargs):  # noqa: E501
        """Remove a Mobi User from a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_group_user(group_title, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove a user from (required)
        :param str user: Username of the user to remove from the Group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_group_user_with_http_info(group_title, user, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_group_user_with_http_info(group_title, user, **kwargs)  # noqa: E501
            return data

    def remove_group_user_with_http_info(self, group_title, user, **kwargs):  # noqa: E501
        """Remove a Mobi User from a Group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_group_user_with_http_info(group_title, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_title: Title of the Group to remove a user from (required)
        :param str user: Username of the user to remove from the Group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_title', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_group_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `remove_group_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `remove_group_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}/users', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group(self, body, group_title, **kwargs):  # noqa: E501
        """Update a Mobi Group's information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group(body, group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON-LD string representation of a Group to replace the existing Group (required)
        :param str group_title: Title of the Group to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_with_http_info(body, group_title, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_with_http_info(body, group_title, **kwargs)  # noqa: E501
            return data

    def update_group_with_http_info(self, body, group_title, **kwargs):  # noqa: E501
        """Update a Mobi Group's information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_with_http_info(body, group_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str body: JSON-LD string representation of a Group to replace the existing Group (required)
        :param str group_title: Title of the Group to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'group_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_group`")  # noqa: E501
        # verify the required parameter 'group_title' is set
        if ('group_title' not in params or
                params['group_title'] is None):
            raise ValueError("Missing the required parameter `group_title` when calling `update_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_title' in params:
            path_params['groupTitle'] = params['group_title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/groups/{groupTitle}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_url(self, url, **kwargs):  # noqa: E501
        """Checks to see if the provided URL is resolvable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_url(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: String representing the URL to verify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_url_with_http_info(url, **kwargs)  # noqa: E501
        else:
            (data) = self.verify_url_with_http_info(url, **kwargs)  # noqa: E501
            return data

    def verify_url_with_http_info(self, url, **kwargs):  # noqa: E501
        """Checks to see if the provided URL is resolvable  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_url_with_http_info(url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str url: String representing the URL to verify. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `verify_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'url' in params:
            path_params['url'] = params['url']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/imported-ontologies/{url}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
