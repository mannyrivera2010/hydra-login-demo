# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MergerequestsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'description': 'str',
        'record_id': 'str',
        'source_branch_id': 'str',
        'target_branch_id': 'str',
        'assignees': 'list[str]',
        'remove_source': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'record_id': 'recordId',
        'source_branch_id': 'sourceBranchId',
        'target_branch_id': 'targetBranchId',
        'assignees': 'assignees',
        'remove_source': 'removeSource'
    }

    def __init__(self, title=None, description=None, record_id=None, source_branch_id=None, target_branch_id=None, assignees=None, remove_source='false'):  # noqa: E501
        """MergerequestsBody - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._description = None
        self._record_id = None
        self._source_branch_id = None
        self._target_branch_id = None
        self._assignees = None
        self._remove_source = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if record_id is not None:
            self.record_id = record_id
        if source_branch_id is not None:
            self.source_branch_id = source_branch_id
        if target_branch_id is not None:
            self.target_branch_id = target_branch_id
        if assignees is not None:
            self.assignees = assignees
        if remove_source is not None:
            self.remove_source = remove_source

    @property
    def title(self):
        """Gets the title of this MergerequestsBody.  # noqa: E501

        Required title for the new MergeRequest  # noqa: E501

        :return: The title of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MergerequestsBody.

        Required title for the new MergeRequest  # noqa: E501

        :param title: The title of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this MergerequestsBody.  # noqa: E501

        Optional description for the new MergeRequest  # noqa: E501

        :return: The description of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MergerequestsBody.

        Optional description for the new MergeRequest  # noqa: E501

        :param description: The description of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def record_id(self):
        """Gets the record_id of this MergerequestsBody.  # noqa: E501

        Required IRI of the VersionedRDFRecord to associate with the new MergeRequest  # noqa: E501

        :return: The record_id of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this MergerequestsBody.

        Required IRI of the VersionedRDFRecord to associate with the new MergeRequest  # noqa: E501

        :param record_id: The record_id of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def source_branch_id(self):
        """Gets the source_branch_id of this MergerequestsBody.  # noqa: E501

        Required IRI of the source Branch with the new commits to add to the target Branch of the new MergeRequest  # noqa: E501

        :return: The source_branch_id of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._source_branch_id

    @source_branch_id.setter
    def source_branch_id(self, source_branch_id):
        """Sets the source_branch_id of this MergerequestsBody.

        Required IRI of the source Branch with the new commits to add to the target Branch of the new MergeRequest  # noqa: E501

        :param source_branch_id: The source_branch_id of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._source_branch_id = source_branch_id

    @property
    def target_branch_id(self):
        """Gets the target_branch_id of this MergerequestsBody.  # noqa: E501

        Required IRI of the target Branch which will receive the new commits from the source Branch of the new MergeRequest  # noqa: E501

        :return: The target_branch_id of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._target_branch_id

    @target_branch_id.setter
    def target_branch_id(self, target_branch_id):
        """Sets the target_branch_id of this MergerequestsBody.

        Required IRI of the target Branch which will receive the new commits from the source Branch of the new MergeRequest  # noqa: E501

        :param target_branch_id: The target_branch_id of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._target_branch_id = target_branch_id

    @property
    def assignees(self):
        """Gets the assignees of this MergerequestsBody.  # noqa: E501

        List of username of Users to assign the new MergeRequest to  # noqa: E501

        :return: The assignees of this MergerequestsBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this MergerequestsBody.

        List of username of Users to assign the new MergeRequest to  # noqa: E501

        :param assignees: The assignees of this MergerequestsBody.  # noqa: E501
        :type: list[str]
        """

        self._assignees = assignees

    @property
    def remove_source(self):
        """Gets the remove_source of this MergerequestsBody.  # noqa: E501

        Boolean value to remove source  # noqa: E501

        :return: The remove_source of this MergerequestsBody.  # noqa: E501
        :rtype: str
        """
        return self._remove_source

    @remove_source.setter
    def remove_source(self, remove_source):
        """Sets the remove_source of this MergerequestsBody.

        Boolean value to remove source  # noqa: E501

        :param remove_source: The remove_source of this MergerequestsBody.  # noqa: E501
        :type: str
        """

        self._remove_source = remove_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MergerequestsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MergerequestsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
