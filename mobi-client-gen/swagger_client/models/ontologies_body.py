# coding: utf-8

"""
    Mobi

    Mobi REST API Documentation  # noqa: E501

    OpenAPI spec version: 1.22.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OntologiesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file': 'str',
        'json': 'str',
        'title': 'str',
        'description': 'str',
        'markdown': 'str',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'file': 'file',
        'json': 'json',
        'title': 'title',
        'description': 'description',
        'markdown': 'markdown',
        'keywords': 'keywords'
    }

    def __init__(self, file=None, json=None, title=None, description=None, markdown=None, keywords=None):  # noqa: E501
        """OntologiesBody - a model defined in Swagger"""  # noqa: E501
        self._file = None
        self._json = None
        self._title = None
        self._description = None
        self._markdown = None
        self._keywords = None
        self.discriminator = None
        if file is not None:
            self.file = file
        if json is not None:
            self.json = json
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if markdown is not None:
            self.markdown = markdown
        if keywords is not None:
            self.keywords = keywords

    @property
    def file(self):
        """Gets the file of this OntologiesBody.  # noqa: E501

        Ontology file to upload.  # noqa: E501

        :return: The file of this OntologiesBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this OntologiesBody.

        Ontology file to upload.  # noqa: E501

        :param file: The file of this OntologiesBody.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def json(self):
        """Gets the json of this OntologiesBody.  # noqa: E501

        Ontology JSON-LD to upload  # noqa: E501

        :return: The json of this OntologiesBody.  # noqa: E501
        :rtype: str
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this OntologiesBody.

        Ontology JSON-LD to upload  # noqa: E501

        :param json: The json of this OntologiesBody.  # noqa: E501
        :type: str
        """

        self._json = json

    @property
    def title(self):
        """Gets the title of this OntologiesBody.  # noqa: E501

        Title for the OntologyRecord  # noqa: E501

        :return: The title of this OntologiesBody.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OntologiesBody.

        Title for the OntologyRecord  # noqa: E501

        :param title: The title of this OntologiesBody.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this OntologiesBody.  # noqa: E501

        Optional description for the OntologyRecord  # noqa: E501

        :return: The description of this OntologiesBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OntologiesBody.

        Optional description for the OntologyRecord  # noqa: E501

        :param description: The description of this OntologiesBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def markdown(self):
        """Gets the markdown of this OntologiesBody.  # noqa: E501

        Optional markdown abstract for the new OntologyRecord  # noqa: E501

        :return: The markdown of this OntologiesBody.  # noqa: E501
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this OntologiesBody.

        Optional markdown abstract for the new OntologyRecord  # noqa: E501

        :param markdown: The markdown of this OntologiesBody.  # noqa: E501
        :type: str
        """

        self._markdown = markdown

    @property
    def keywords(self):
        """Gets the keywords of this OntologiesBody.  # noqa: E501

        Optional list of keyword strings for the OntologyRecord  # noqa: E501

        :return: The keywords of this OntologiesBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this OntologiesBody.

        Optional list of keyword strings for the OntologyRecord  # noqa: E501

        :param keywords: The keywords of this OntologiesBody.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OntologiesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OntologiesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
